name: Deploy Lambda Function with API gateway

on:
  push:
    branches:
    - main
  pull_request:

env:
  REPO_NAME: ${{ github.event.repository.name }}
  TF_TOKEN: ${{ secrets.TF_API_TOKEN }}

jobs:
  deploy-lambda:
    name: Deploy Lambda Function w/ Terraform
    runs-on: ubuntu-20.04
    permissions:
      contents: read
      id-token: write
      packages: read
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
          
      # - name: Install docker
      #   id: install-docker
      #   run: |
      #     curl -fsSL https://get.docker.com -o get-docker.sh && chmod +x get-docker.sh && ./get-docker.sh

      # - name: Build, tag, and push docker image to Amazon ECR
      #   env:
      #     REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     FULL_IMAGE_TAG: ${{ env.REPO_NAME }}
      #   run: |
      #     docker build --no-cache -t $REGISTRY/${{ env.REPO_NAME }}:$FULL_IMAGE_TAG .
      #     docker push $REGISTRY/${{ env.REPO_NAME }}
      
      - name: Generate .auto.tfvars
        working-directory: ./infra
        run: |
          echo "access_key=\"${{ secrets.AWS_ACCESS_KEY_ID }}\"" >> ./.auto.tfvars
          echo "secret_key=\"${{ secrets.AWS_SECRET_ACCESS_KEY }}\"" >> ./.auto.tfvars
          echo "image_tag=\"${{ env.REPO_NAME}}\"" >> ./.auto.tfvars
          echo "lambda_func_name=\"${{ env.REPO_NAME}}\"" >> ./.auto.tfvars
          echo "---------------------------------------------------------"
          cat ./.auto.tfvars
          echo "---------------------------------------------------------"        

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      
      - name: Terrform format
        id: fmt
        working-directory: ./infra
        run: terraform fmt -check
        
      - name: Terraform Init
        id: init
        working-directory: ./infra
        env:
          TF_TOKEN: ${{ secrets.TF_API_TOKEN }}
        run: |
          terraform init
    
      - name: Terraform validate
        id: validate
        working-directory: ./infra
        env:
          TF_WORKSPACE: ${{ env.REPO_NAME }}
          TF_TOKEN: ${{ secrets.TF_API_TOKEN }}
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        working-directory: ./infra
        if: github.event_name == 'pull_request'
        env:
          TF_WORKSPACE: ${{ env.REPO_NAME }}
          TF_TOKEN: ${{ secrets.TF_API_TOKEN }}
        run: terraform plan -no-color -input=false
        continue-on-error: true
      
      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        working-directory: ./infra
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        env:
          TF_WORKSPACE: ${{ env.REPO_NAME }}
          TF_TOKEN: ${{ secrets.TFE_API_TOKEN }}
        run: terraform apply -auto-approve -input=false